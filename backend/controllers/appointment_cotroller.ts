import { Request, Response } from "express";
import Appointment,{IAppointment} from "../models/Appointment";
import Department,{IDepartment} from"../models/Departments";
import Doctor,{IDoctor} from "../models/Doctor";
import axios from 'axios';


export const addAppointments = async (req: Request, res: Response) => {
  
  try {
    const { patientName, phone, reason, date, time,departmentName,doctorName,  } = req.body;
    console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

    // const department = await Department.findById(departmentId);
    // const doctor = await Doctor.findById(doctorId);
//     if (!department || !doctor) {
//    res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin khoa ho·∫∑c b√°c sƒ©" });
//    return;
// }
    if (!req.user || !req.user.email){
         res.status(401).json({ message: 'User not authenticated' });
         return;
    }
    

    const email = req.user.email; // üëà L·∫•y email t·ª´ token
   

    if (!email) {
       res.status(401).json({ message: "Kh√¥ng t√¨m th·∫•y email ng∆∞·ªùi d√πng" });
       return;
    }

    const newAppointment = new Appointment({
      patientName,
      phone,
      reason,
      date: date,
      time: time,
      departmentName: departmentName,
      doctorName: doctorName,
      email,
    });

    await newAppointment.save();
    console.log('D·ªØ li·ªáu g·ª≠i t·ªõi webhook:', {
      patientName,
      email,
      departmentName,
      doctorName,
      date,
      time,
    });

    // await axios.post('http://localhost:5678/webhook-test/api_n8n/appointments', {
    //   patientName,
    //   departmentName,
    //   doctorName,
    //   email,
    //   date,
    //   time,
    // });

     res.status(201).json({ message: "ƒê·∫∑t l·ªãch th√†nh c√¥ng", appointment: newAppointment });
    return;
  } catch (error) {
    console.error("L·ªói khi t·∫°o l·ªãch h·∫πn:", error);
     res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
     return;
  }
};
export const getAppointment = async (req: Request, res: Response) => {
  try {
    const appointment = await Appointment.find()
    const formattedAppointment = await Promise.all(
      appointment.map(async (item: IAppointment) => {
    
        return {
          _id: item._id.toString(),
          patientName: item.patientName || 'Kh√¥ng r√µ t√™n',
          phone: item.phone || 'kh√¥ng c√≥',
          reason: item.reason || 'kh√¥ng c√≥',
          date: item.date || 'kh√¥ng c√≥',
          time: item.time || 'kh√¥ng c√≥',
          doctorName: item.doctorName || 'kh√¥ng r√µ',
          departmentName: item.departmentName || 'Kh√¥ng r√µ',
          status: item.status || 'kh√¥ng c√≥',
          email: item.email || 'kh√¥ng c√≥', // üëà ƒë√¢y l√† n∆°i email b·ªã m·∫•t n·∫øu b·ªã ƒë√®
          createdAt: item.createdAt || 'kh√¥ng c√≥',
        };
      })
    );
    
    res.status(200).json(formattedAppointment);
  } catch (error) {
    console.error("L·ªói khi l·∫•y ", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

export const getMonthlyAppointments = async (req: Request, res: Response) => {
  try {
    const appointments = await Appointment.aggregate([
      // Nh√≥m theo nƒÉm v√† th√°ng d·ª±a tr√™n tr∆∞·ªùng date
      {
        $addFields: {
          dateObj: { $dateFromString: { dateString: "$date" } }, // Chuy·ªÉn date t·ª´ string sang Date
        },
      },
      {
        $group: {
          _id: {
            year: { $year: "$dateObj" },
            month: { $month: "$dateObj" },
          },
          totalAppointments: { $sum: 1 }, // ƒê·∫øm t·ªïng s·ªë l·ªãch h·∫πn
          patients: { $addToSet: "$patientName" }, // T·∫≠p h·ª£p b·ªánh nh√¢n duy nh·∫•t
          appointments: { $push: "$$ROOT" }, // L∆∞u to√†n b·ªô th√¥ng tin l·ªãch h·∫πn
        },
      },
      {
        $project: {
          _id: 0,
          year: "$_id.year",
          month: "$_id.month",
          totalAppointments: 1,
          totalPatients: { $size: "$patients" }, // ƒê·∫øm s·ªë b·ªánh nh√¢n duy nh·∫•t
          appointments: 1,
        },
      },
      { $sort: { year: 1, month: 1 } }, // S·∫Øp x·∫øp theo nƒÉm v√† th√°ng
    ]);

    res.status(200).json(appointments);
  } catch (error) {
    console.error("L·ªói khi l·∫•y th·ªëng k√™ l·ªãch h·∫πn theo th√°ng:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};
export const updateStatus = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    // Ki·ªÉm tra xem l·ªãch h·∫πn c√≥ t·ªìn t·∫°i kh√¥ng
    const appointment = await Appointment.findById(id);
    if (!appointment) {
       res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn' });
       return;
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i
    appointment.status = status;
    await appointment.save();

    res.status(200).json({ message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng', appointment });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

