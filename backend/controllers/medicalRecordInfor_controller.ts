import { Request, Response } from 'express';
import DiabetesRecord, { IDiabetesRecord } from '../models/medicl_record_infor';;

// Th√™m m·ªõi b·ªánh √°n
export const createMedicalRecord = async (req: Request, res: Response) => {
  try {
    const { patientName,email, examinationDate,doctorName,departmentName, gender, age, urea, creatinine, hba1c, cholesterol,triglycerides, hdl, ldl, vldl, bmi, status } = req.body;
    console.log("D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

    const newRecord = new DiabetesRecord ({
        patientName,
        email,
        examinationDate,
        doctorName,
        departmentName,
        gender,
        age,
        urea,
        creatinine,
        hba1c,
        cholesterol,
        triglycerides,
        hdl,
        ldl,
        vldl,
        bmi,
        status,

    });
     await newRecord.save();
    res.status(201).json({ message: "Th√™m th√†nh c√¥ng", DiabetesRecord: newRecord });
  } catch (error) {
    console.error("L·ªói khi t·∫°o b·ªánh √°n:", error);
    res.status(500).json({ message: 'L·ªói khi t·∫°o b·ªánh √°n', error });
  }
};

export const getMedicalRecord = async (req: Request, res: Response) => {
  try {
    if (!req.user || !req.user.email) {
       res.status(401).json({ message: 'Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p' });
       return;
    }

    const email = req.user.email;

    const medicalRecords = await DiabetesRecord.find({ email }); // üëà l·ªçc theo email ng∆∞·ªùi d√πng
    res.status(200).json(medicalRecords);
  } catch (error) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu b·ªánh √°n", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};



// C·∫≠p nh·∫≠t b·ªánh √°n theo ID
export const updateMedicalRecord = async (req: Request, res: Response) => {
  const { id } = req.params;
  try {
    const updatedRecord = await DiabetesRecord.findByIdAndUpdate(id, req.body, { new: true });
    if (!updatedRecord) {
       res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y b·ªánh √°n' });
       return;
    }
    res.status(200).json(updatedRecord);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t b·ªánh √°n', error });
  }
};
